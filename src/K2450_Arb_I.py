#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.2
#  in conjunction with Tcl version 8.6
#    Feb 19, 2022 11:12:56 AM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import K2450_Arb_I_support

class Toplevel1:
  def __init__(self, top=None):
    '''This class configures and populates the toplevel window.
       top is the toplevel containing window.'''
    _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
    _fgcolor = '#000000'  # X11 color: 'black'
    _compcolor = '#d9d9d9' # X11 color: 'gray85'
    _ana1color = '#d9d9d9' # X11 color: 'gray85'
    _ana2color = '#d9d9d9' # X11 color: 'gray85'
    self.style = ttk.Style()
    if sys.platform == "win32":
      self.style.theme_use('winnative')
    self.style.configure('.',background=_bgcolor)
    self.style.configure('.',foreground=_fgcolor)
    self.style.configure('.',font="TkDefaultFont")
    self.style.map('.',background=
      [('selected', _compcolor), ('active',_ana2color)])

    top.geometry("1200x880+519+275")
    top.minsize(120, 1)
    top.maxsize(5124, 1421)
    top.resizable(1,  1)
    top.title("K2450 Arb Source")
    top.configure(background="#d9d9d9")
    top.configure(highlightbackground="#d9d9d9")
    top.configure(highlightcolor="black")

    self.top = top
    self.select_visa_adress = tk.StringVar()
    self.var_pwl_file = tk.StringVar()
    self.spin_manualdelay = tk.StringVar()
    self.spin_manualdelay.set('1.0')
    self.spin_uvlo = tk.StringVar()
    self.spin_uvlo.set('-10.0')
    self.var_protect_box = tk.StringVar()
    self.spin_vlimit = tk.StringVar()
    self.spin_vlimit.set('0.0')
    self.spin_timesteps = tk.StringVar()
    self.spin_timesteps.set('1.0')
    self.spin_nplcs = tk.StringVar()
    self.spin_nplcs.set('0.01')
    self.var_i_range_box = tk.StringVar()
    self.var_range_v_box = tk.StringVar()
    self.spin_inital_delay = tk.StringVar()
    self.spin_inital_delay.set('0.2')
    self.chk_autozero = tk.IntVar()
    self.chk_autodelay = tk.IntVar()
    self.chk_uvlo_on = tk.IntVar()
    self.chk_4wire = tk.IntVar()
    self.chk_invert = tk.IntVar()
    self.chk_autonplcs = tk.IntVar()
    self.chk_beep = tk.IntVar()
    self.chk_protect_enable = tk.IntVar()
    self.chk_autovrange = tk.IntVar()
    self.chk_autoirange = tk.IntVar()
    self.chk_assure_timing = tk.IntVar()
    self.chk_steppy_currents = tk.IntVar()

    self.Label1 = tk.Label(self.top)
    self.Label1.place(relx=0.008, rely=0.011, height=23, width=92)
    self.Label1.configure(activebackground="#f9f9f9")
    self.Label1.configure(activeforeground="black")
    self.Label1.configure(anchor='w')
    self.Label1.configure(background="#d9d9d9")
    self.Label1.configure(compound='left')
    self.Label1.configure(disabledforeground="#a3a3a3")
    self.Label1.configure(foreground="#000000")
    self.Label1.configure(highlightbackground="#d9d9d9")
    self.Label1.configure(highlightcolor="black")
    self.Label1.configure(text='''Visa Address:''')

    self.Button1 = tk.Button(self.top)
    self.Button1.place(relx=0.633, rely=0.011, height=24, width=65)
    self.Button1.configure(activebackground="#d9d9d9")
    self.Button1.configure(activeforeground="black")
    self.Button1.configure(background="#d9d9d9")
    self.Button1.configure(command=K2450_Arb_I_support.K2450_open)
    self.Button1.configure(compound='left')
    self.Button1.configure(disabledforeground="#a3a3a3")
    self.Button1.configure(foreground="#000000")
    self.Button1.configure(highlightbackground="#d9d9d9")
    self.Button1.configure(highlightcolor="black")
    self.Button1.configure(pady="0")
    self.Button1.configure(text='''Open''')

    self.TCombobox1 = ttk.Combobox(self.top)
    self.TCombobox1.place(relx=0.092, rely=0.011, relheight=0.026, relwidth=0.53)

    self.TCombobox1.configure(textvariable=self.select_visa_adress)
    self.select_visa_adress.set('''select_visa_adress''')
    self.TCombobox1.configure(takefocus="")

    self.Scrolledtext1 = ScrolledText(self.top)
    self.Scrolledtext1.place(relx=0.373, rely=0.818, relheight=0.173
        , relwidth=0.623)
    self.Scrolledtext1.configure(background="white")
    self.Scrolledtext1.configure(font="TkTextFont")
    self.Scrolledtext1.configure(foreground="black")
    self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
    self.Scrolledtext1.configure(highlightcolor="black")
    self.Scrolledtext1.configure(insertbackground="black")
    self.Scrolledtext1.configure(insertborderwidth="3")
    self.Scrolledtext1.configure(selectbackground="blue")
    self.Scrolledtext1.configure(selectforeground="white")
    self.Scrolledtext1.configure(wrap="none")

    self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
    top.configure(menu = self.menubar)

    self.Button2 = tk.Button(self.top)
    self.Button2.place(relx=0.88, rely=0.1, height=120, width=137)
    self.Button2.configure(activebackground="#d9d9d9")
    self.Button2.configure(activeforeground="black")
    self.Button2.configure(background="#d9d9d9")
    self.Button2.configure(command=K2450_Arb_I_support.Run_Sequence)
    self.Button2.configure(compound='left')
    self.Button2.configure(disabledforeground="#a3a3a3")
    self.Button2.configure(font="-family {Segoe UI} -size 26")
    self.Button2.configure(foreground="#000000")
    self.Button2.configure(highlightbackground="#d9d9d9")
    self.Button2.configure(highlightcolor="black")
    self.Button2.configure(pady="0")
    self.Button2.configure(state='disabled')
    self.Button2.configure(text='''RUN''')

    self.Label2 = tk.Label(self.top)
    self.Label2.place(relx=0.008, rely=0.045, height=22, width=74)
    self.Label2.configure(activebackground="#f9f9f9")
    self.Label2.configure(activeforeground="black")
    self.Label2.configure(anchor='w')
    self.Label2.configure(background="#d9d9d9")
    self.Label2.configure(compound='left')
    self.Label2.configure(disabledforeground="#a3a3a3")
    self.Label2.configure(foreground="#000000")
    self.Label2.configure(highlightbackground="#d9d9d9")
    self.Label2.configure(highlightcolor="black")
    self.Label2.configure(text='''PWL File:''')

    self.Button3 = tk.Button(self.top)
    self.Button3.place(relx=0.633, rely=0.045, height=24, width=65)
    self.Button3.configure(activebackground="#d9d9d9")
    self.Button3.configure(activeforeground="black")
    self.Button3.configure(background="#d9d9d9")
    self.Button3.configure(command=K2450_Arb_I_support.PWL_file_open)
    self.Button3.configure(compound='left')
    self.Button3.configure(disabledforeground="#a3a3a3")
    self.Button3.configure(foreground="#000000")
    self.Button3.configure(highlightbackground="#d9d9d9")
    self.Button3.configure(highlightcolor="black")
    self.Button3.configure(pady="0")
    self.Button3.configure(text='''Choose''')

    self.Button4 = tk.Button(self.top)
    self.Button4.place(relx=0.917, rely=0.045, height=24, width=65)
    self.Button4.configure(activebackground="#d9d9d9")
    self.Button4.configure(activeforeground="black")
    self.Button4.configure(background="#d9d9d9")
    self.Button4.configure(command=K2450_Arb_I_support.PWL_file_reload)
    self.Button4.configure(compound='left')
    self.Button4.configure(disabledforeground="#a3a3a3")
    self.Button4.configure(foreground="#000000")
    self.Button4.configure(highlightbackground="#d9d9d9")
    self.Button4.configure(highlightcolor="black")
    self.Button4.configure(pady="0")
    self.Button4.configure(text='''Reload''')
    self.tooltip_font = "TkDefaultFont"
    self.Button4_tooltip = \
    ToolTip(self.Button4, self.tooltip_font, '''Reload file. If you don't reload, the source data will be timestretched if you change the timestep!''')

    self.Canvas1 = tk.Canvas(self.top)
    self.Canvas1.place(relx=0.0, rely=0.3, relheight=0.516, relwidth=0.993)
    self.Canvas1.configure(background="#d9d9d9")
    self.Canvas1.configure(borderwidth="2")
    self.Canvas1.configure(highlightbackground="#d9d9d9")
    self.Canvas1.configure(highlightcolor="black")
    self.Canvas1.configure(insertbackground="black")
    self.Canvas1.configure(relief="ridge")
    self.Canvas1.configure(selectbackground="blue")
    self.Canvas1.configure(selectforeground="white")

    self.Button5 = tk.Button(self.top)
    self.Button5.place(relx=0.74, rely=0.264, height=24, width=157)
    self.Button5.configure(activebackground="#d9d9d9")
    self.Button5.configure(activeforeground="black")
    self.Button5.configure(background="#d9d9d9")
    self.Button5.configure(command=K2450_Arb_I_support.btn_export_csv)
    self.Button5.configure(compound='left')
    self.Button5.configure(disabledforeground="#a3a3a3")
    self.Button5.configure(foreground="#000000")
    self.Button5.configure(highlightbackground="#d9d9d9")
    self.Button5.configure(highlightcolor="black")
    self.Button5.configure(pady="0")
    self.Button5.configure(state='disabled')
    self.Button5.configure(text='''Export Results as CSV''')

    self.Checkbutton1 = tk.Checkbutton(self.top)
    self.Checkbutton1.place(relx=0.007, rely=0.118, relheight=0.025
        , relwidth=0.088)
    self.Checkbutton1.configure(activebackground="#d9d9d9")
    self.Checkbutton1.configure(activeforeground="black")
    self.Checkbutton1.configure(anchor='w')
    self.Checkbutton1.configure(background="#d9d9d9")
    self.Checkbutton1.configure(compound='left')
    self.Checkbutton1.configure(disabledforeground="#a3a3a3")
    self.Checkbutton1.configure(foreground="#000000")
    self.Checkbutton1.configure(highlightbackground="#d9d9d9")
    self.Checkbutton1.configure(highlightcolor="black")
    self.Checkbutton1.configure(justify='left')
    self.Checkbutton1.configure(text='''Autozero''')
    self.Checkbutton1.configure(variable=self.chk_autozero)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton1_tooltip = \
    ToolTip(self.Checkbutton1, self.tooltip_font, '''Enables autozero. Helps on long runs to avoid drifting, but is slower!''')

    self.TSeparator1 = ttk.Separator(self.top)
    self.TSeparator1.place(relx=0.007, rely=0.082,  relwidth=0.978)

    self.Label3 = tk.Label(self.top)
    self.Label3.place(relx=0.007, rely=0.091, height=24, width=202)
    self.Label3.configure(activebackground="#f9f9f9")
    self.Label3.configure(activeforeground="black")
    self.Label3.configure(anchor='w')
    self.Label3.configure(background="#d9d9d9")
    self.Label3.configure(compound='left')
    self.Label3.configure(disabledforeground="#a3a3a3")
    self.Label3.configure(foreground="#000000")
    self.Label3.configure(highlightbackground="#d9d9d9")
    self.Label3.configure(highlightcolor="black")
    self.Label3.configure(text='''Current Source Configuration''')

    self.Checkbutton2 = tk.Checkbutton(self.top)
    self.Checkbutton2.place(relx=0.007, rely=0.191, relheight=0.024
        , relwidth=0.083)
    self.Checkbutton2.configure(activebackground="#d9d9d9")
    self.Checkbutton2.configure(activeforeground="black")
    self.Checkbutton2.configure(anchor='w')
    self.Checkbutton2.configure(background="#d9d9d9")
    self.Checkbutton2.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton2.configure(compound='left')
    self.Checkbutton2.configure(disabledforeground="#a3a3a3")
    self.Checkbutton2.configure(foreground="#000000")
    self.Checkbutton2.configure(highlightbackground="#d9d9d9")
    self.Checkbutton2.configure(highlightcolor="black")
    self.Checkbutton2.configure(justify='left')
    self.Checkbutton2.configure(text='''Autodelay''')
    self.Checkbutton2.configure(variable=self.chk_autodelay)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton2_tooltip = \
    ToolTip(self.Checkbutton2, self.tooltip_font, '''Enables the SMUs internal automatically source settling delays. Can be very slow on low ranges!''')

    self.Checkbutton3 = tk.Checkbutton(self.top)
    self.Checkbutton3.place(relx=0.007, rely=0.227, relheight=0.027
        , relwidth=0.069)
    self.Checkbutton3.configure(activebackground="#d9d9d9")
    self.Checkbutton3.configure(activeforeground="black")
    self.Checkbutton3.configure(anchor='w')
    self.Checkbutton3.configure(background="#d9d9d9")
    self.Checkbutton3.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton3.configure(compound='left')
    self.Checkbutton3.configure(disabledforeground="#a3a3a3")
    self.Checkbutton3.configure(foreground="#000000")
    self.Checkbutton3.configure(highlightbackground="#d9d9d9")
    self.Checkbutton3.configure(highlightcolor="black")
    self.Checkbutton3.configure(justify='left')
    self.Checkbutton3.configure(text='''UVLO (V):''')
    self.Checkbutton3.configure(variable=self.chk_uvlo_on)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton3_tooltip = \
    ToolTip(self.Checkbutton3, self.tooltip_font, '''Programs the trigger model to stop on an undervoltage condition. Use to avoid negative voltages on protected cell packs!''')

    self.Entry3 = tk.Entry(self.top)
    self.Entry3.place(relx=0.092, rely=0.045, height=24, relwidth=0.531)
    self.Entry3.configure(background="white")
    self.Entry3.configure(disabledforeground="#a3a3a3")
    self.Entry3.configure(font="TkFixedFont")
    self.Entry3.configure(foreground="#000000")
    self.Entry3.configure(highlightbackground="#d9d9d9")
    self.Entry3.configure(highlightcolor="black")
    self.Entry3.configure(insertbackground="black")
    self.Entry3.configure(selectbackground="blue")
    self.Entry3.configure(selectforeground="white")
    self.Entry3.configure(textvariable=self.var_pwl_file)
    self.var_pwl_file.set('''var_pwl_file''')

    self.Spinbox1 = tk.Spinbox(self.top, from_=1.0, to=100.0)
    self.Spinbox1.place(relx=0.187, rely=0.191, relheight=0.025, relwidth=0.043)
    self.Spinbox1.configure(activebackground="#f9f9f9")
    self.Spinbox1.configure(background="white")
    self.Spinbox1.configure(buttonbackground="#d9d9d9")
    self.Spinbox1.configure(disabledforeground="#a3a3a3")
    self.Spinbox1.configure(font="TkDefaultFont")
    self.Spinbox1.configure(foreground="black")
    self.Spinbox1.configure(highlightbackground="black")
    self.Spinbox1.configure(highlightcolor="black")
    self.Spinbox1.configure(increment="0.1")
    self.Spinbox1.configure(insertbackground="black")
    self.Spinbox1.configure(selectbackground="blue")
    self.Spinbox1.configure(selectforeground="white")
    self.Spinbox1.configure(textvariable=self.spin_manualdelay)
    self.spin_manualdelay.set('''spin_manualdelay''')

    self.Spinbox2 = tk.Spinbox(self.top, from_=-10.0, to=100.0)
    self.Spinbox2.place(relx=0.08, rely=0.227, relheight=0.027, relwidth=0.062)
    self.Spinbox2.configure(activebackground="#f9f9f9")
    self.Spinbox2.configure(background="white")
    self.Spinbox2.configure(buttonbackground="#d9d9d9")
    self.Spinbox2.configure(disabledforeground="#a3a3a3")
    self.Spinbox2.configure(font="TkDefaultFont")
    self.Spinbox2.configure(foreground="black")
    self.Spinbox2.configure(highlightbackground="black")
    self.Spinbox2.configure(highlightcolor="black")
    self.Spinbox2.configure(increment="0.1")
    self.Spinbox2.configure(insertbackground="black")
    self.Spinbox2.configure(selectbackground="blue")
    self.Spinbox2.configure(selectforeground="white")
    self.Spinbox2.configure(textvariable=self.spin_uvlo)
    self.spin_uvlo.set('''spin_uvlo''')

    self.TCombobox2 = ttk.Combobox(self.top)
    self.TCombobox2.place(relx=0.227, rely=0.264, relheight=0.027
        , relwidth=0.063)
    self.value_list = ['2','5','10','20','40','60','80','100','120','140','160','180',]
    self.TCombobox2.configure(values=self.value_list)
    self.TCombobox2.configure(textvariable=self.var_protect_box)
    self.var_protect_box.set('''var_protect_box''')
    self.TCombobox2.configure(takefocus="")

    self.Spinbox3 = tk.Spinbox(self.top, from_=0.0, to=100.0)
    self.Spinbox3.place(relx=0.08, rely=0.264, relheight=0.027, relwidth=0.062)
    self.Spinbox3.configure(activebackground="#f9f9f9")
    self.Spinbox3.configure(background="white")
    self.Spinbox3.configure(buttonbackground="#d9d9d9")
    self.Spinbox3.configure(disabledforeground="#a3a3a3")
    self.Spinbox3.configure(font="TkDefaultFont")
    self.Spinbox3.configure(foreground="black")
    self.Spinbox3.configure(highlightbackground="black")
    self.Spinbox3.configure(highlightcolor="black")
    self.Spinbox3.configure(increment="0.05")
    self.Spinbox3.configure(insertbackground="black")
    self.Spinbox3.configure(selectbackground="blue")
    self.Spinbox3.configure(selectforeground="white")
    self.Spinbox3.configure(textvariable=self.spin_vlimit)
    self.spin_vlimit.set('''spin_vlimit''')

    self.Label6 = tk.Label(self.top)
    self.Label6.place(relx=0.027, rely=0.264, height=22, width=54)
    self.Label6.configure(activebackground="#f9f9f9")
    self.Label6.configure(activeforeground="black")
    self.Label6.configure(anchor='w')
    self.Label6.configure(background="#d9d9d9")
    self.Label6.configure(compound='left')
    self.Label6.configure(disabledforeground="#a3a3a3")
    self.Label6.configure(foreground="#000000")
    self.Label6.configure(highlightbackground="#d9d9d9")
    self.Label6.configure(highlightcolor="black")
    self.Label6.configure(text='''Limit (V):''')
    self.tooltip_font = "TkDefaultFont"
    self.Label6_tooltip = \
    ToolTip(self.Label6, self.tooltip_font, '''Output voltage limit''')

    self.Label7 = tk.Label(self.top)
    self.Label7.place(relx=0.313, rely=0.091, height=21, width=210)
    self.Label7.configure(activebackground="#f9f9f9")
    self.Label7.configure(activeforeground="black")
    self.Label7.configure(anchor='w')
    self.Label7.configure(background="#d9d9d9")
    self.Label7.configure(compound='left')
    self.Label7.configure(disabledforeground="#a3a3a3")
    self.Label7.configure(foreground="#000000")
    self.Label7.configure(highlightbackground="#d9d9d9")
    self.Label7.configure(highlightcolor="black")
    self.Label7.configure(text='''Voltage Measurement Configuration''')

    self.Checkbutton4 = tk.Checkbutton(self.top)
    self.Checkbutton4.place(relx=0.313, rely=0.118, relheight=0.027
        , relwidth=0.068)
    self.Checkbutton4.configure(activebackground="#d9d9d9")
    self.Checkbutton4.configure(activeforeground="black")
    self.Checkbutton4.configure(anchor='w')
    self.Checkbutton4.configure(background="#d9d9d9")
    self.Checkbutton4.configure(compound='left')
    self.Checkbutton4.configure(disabledforeground="#a3a3a3")
    self.Checkbutton4.configure(foreground="#000000")
    self.Checkbutton4.configure(highlightbackground="#d9d9d9")
    self.Checkbutton4.configure(highlightcolor="black")
    self.Checkbutton4.configure(justify='left')
    self.Checkbutton4.configure(text='''4 Wire''')
    self.Checkbutton4.configure(variable=self.chk_4wire)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton4_tooltip = \
    ToolTip(self.Checkbutton4, self.tooltip_font, '''Enable 4-wire measurments. Connect accordingly!''')

    self.Label8 = tk.Label(self.top)
    self.Label8.place(relx=0.313, rely=0.155, height=22, width=63)
    self.Label8.configure(activebackground="#f9f9f9")
    self.Label8.configure(activeforeground="black")
    self.Label8.configure(anchor='w')
    self.Label8.configure(background="#d9d9d9")
    self.Label8.configure(compound='left')
    self.Label8.configure(disabledforeground="#a3a3a3")
    self.Label8.configure(foreground="#000000")
    self.Label8.configure(highlightbackground="#d9d9d9")
    self.Label8.configure(highlightcolor="black")
    self.Label8.configure(text='''Range (V):''')

    self.Label9 = tk.Label(self.top)
    self.Label9.place(relx=0.713, rely=0.045, height=22, width=87)
    self.Label9.configure(activebackground="#f9f9f9")
    self.Label9.configure(activeforeground="black")
    self.Label9.configure(anchor='w')
    self.Label9.configure(background="#d9d9d9")
    self.Label9.configure(compound='left')
    self.Label9.configure(disabledforeground="#a3a3a3")
    self.Label9.configure(foreground="#000000")
    self.Label9.configure(highlightbackground="#d9d9d9")
    self.Label9.configure(highlightcolor="black")
    self.Label9.configure(text='''Timestep (ms):''')
    self.tooltip_font = "TkDefaultFont"
    self.Label9_tooltip = \
    ToolTip(self.Label9, self.tooltip_font, '''Discretizing steps for the pwl file''')

    self.Spinbox5 = tk.Spinbox(self.top, from_=1.0, to=100.0)
    self.Spinbox5.place(relx=0.793, rely=0.045, relheight=0.025, relwidth=0.055)
    self.Spinbox5.configure(activebackground="#f9f9f9")
    self.Spinbox5.configure(background="white")
    self.Spinbox5.configure(buttonbackground="#d9d9d9")
    self.Spinbox5.configure(disabledforeground="#a3a3a3")
    self.Spinbox5.configure(font="TkDefaultFont")
    self.Spinbox5.configure(foreground="black")
    self.Spinbox5.configure(highlightbackground="black")
    self.Spinbox5.configure(highlightcolor="black")
    self.Spinbox5.configure(increment="0.5")
    self.Spinbox5.configure(insertbackground="black")
    self.Spinbox5.configure(selectbackground="blue")
    self.Spinbox5.configure(selectforeground="white")
    self.Spinbox5.configure(textvariable=self.spin_timesteps)
    self.spin_timesteps.set('''spin_timesteps''')

    self.Button6 = tk.Button(self.top)
    self.Button6.place(relx=0.74, rely=0.191, height=24, width=157)
    self.Button6.configure(activebackground="#d9d9d9")
    self.Button6.configure(activeforeground="black")
    self.Button6.configure(background="#d9d9d9")
    self.Button6.configure(command=K2450_Arb_I_support.plot_pwl_data)
    self.Button6.configure(compound='left')
    self.Button6.configure(disabledforeground="#a3a3a3")
    self.Button6.configure(foreground="#000000")
    self.Button6.configure(highlightbackground="#d9d9d9")
    self.Button6.configure(highlightcolor="black")
    self.Button6.configure(pady="0")
    self.Button6.configure(state='disabled')
    self.Button6.configure(text='''Plot PWL Data''')

    self.Button7 = tk.Button(self.top)
    self.Button7.place(relx=0.74, rely=0.227, height=24, width=157)
    self.Button7.configure(activebackground="#d9d9d9")
    self.Button7.configure(activeforeground="black")
    self.Button7.configure(background="#d9d9d9")
    self.Button7.configure(command=K2450_Arb_I_support.plot_results)
    self.Button7.configure(compound='left')
    self.Button7.configure(disabledforeground="#a3a3a3")
    self.Button7.configure(foreground="#000000")
    self.Button7.configure(highlightbackground="#d9d9d9")
    self.Button7.configure(highlightcolor="black")
    self.Button7.configure(pady="0")
    self.Button7.configure(state='disabled')
    self.Button7.configure(text='''Plot Results''')

    self.Checkbutton5 = tk.Checkbutton(self.top)
    self.Checkbutton5.place(relx=0.85, rely=0.045, relheight=0.025
        , relwidth=0.058)
    self.Checkbutton5.configure(activebackground="#d9d9d9")
    self.Checkbutton5.configure(activeforeground="black")
    self.Checkbutton5.configure(anchor='w')
    self.Checkbutton5.configure(background="#d9d9d9")
    self.Checkbutton5.configure(compound='left')
    self.Checkbutton5.configure(disabledforeground="#a3a3a3")
    self.Checkbutton5.configure(foreground="#000000")
    self.Checkbutton5.configure(highlightbackground="#d9d9d9")
    self.Checkbutton5.configure(highlightcolor="black")
    self.Checkbutton5.configure(justify='left')
    self.Checkbutton5.configure(text='''Invert''')
    self.Checkbutton5.configure(variable=self.chk_invert)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton5_tooltip = \
    ToolTip(self.Checkbutton5, self.tooltip_font, '''Change sign of all read currents''')

    self.Button8 = tk.Button(self.top)
    self.Button8.place(relx=0.692, rely=0.011, height=24, width=67)
    self.Button8.configure(activebackground="#d9d9d9")
    self.Button8.configure(activeforeground="black")
    self.Button8.configure(background="#d9d9d9")
    self.Button8.configure(command=K2450_Arb_I_support.refresh_visa_devices)
    self.Button8.configure(compound='left')
    self.Button8.configure(disabledforeground="#a3a3a3")
    self.Button8.configure(foreground="#000000")
    self.Button8.configure(highlightbackground="#d9d9d9")
    self.Button8.configure(highlightcolor="black")
    self.Button8.configure(pady="0")
    self.Button8.configure(text='''Refresh''')
    self.tooltip_font = "TkDefaultFont"
    self.Button8_tooltip = \
    ToolTip(self.Button8, self.tooltip_font, '''Refresh VISA adresses''')

    self.Label10 = tk.Label(self.top)
    self.Label10.place(relx=0.087, rely=0.191, height=22, width=112)
    self.Label10.configure(activebackground="#f9f9f9")
    self.Label10.configure(activeforeground="black")
    self.Label10.configure(anchor='w')
    self.Label10.configure(background="#d9d9d9")
    self.Label10.configure(compound='left')
    self.Label10.configure(disabledforeground="#a3a3a3")
    self.Label10.configure(foreground="#000000")
    self.Label10.configure(highlightbackground="#d9d9d9")
    self.Label10.configure(highlightcolor="black")
    self.Label10.configure(text='''Manual Delay (ms):''')

    self.Label11 = tk.Label(self.top)
    self.Label11.place(relx=0.327, rely=0.191, height=24, width=36)
    self.Label11.configure(activebackground="#f9f9f9")
    self.Label11.configure(activeforeground="black")
    self.Label11.configure(anchor='w')
    self.Label11.configure(background="#d9d9d9")
    self.Label11.configure(compound='left')
    self.Label11.configure(disabledforeground="#a3a3a3")
    self.Label11.configure(foreground="#000000")
    self.Label11.configure(highlightbackground="#d9d9d9")
    self.Label11.configure(highlightcolor="black")
    self.Label11.configure(text='''NPLC:''')
    self.tooltip_font = "TkDefaultFont"
    self.Label11_tooltip = \
    ToolTip(self.Label11, self.tooltip_font, '''Number of power line cycles''')

    self.Spinbox6 = tk.Spinbox(self.top, from_=0.01, to=100.0)
    self.Spinbox6.place(relx=0.367, rely=0.191, relheight=0.027, relwidth=0.068)
    self.Spinbox6.configure(activebackground="#f9f9f9")
    self.Spinbox6.configure(background="white")
    self.Spinbox6.configure(buttonbackground="#d9d9d9")
    self.Spinbox6.configure(disabledforeground="#a3a3a3")
    self.Spinbox6.configure(font="TkDefaultFont")
    self.Spinbox6.configure(foreground="black")
    self.Spinbox6.configure(highlightbackground="black")
    self.Spinbox6.configure(highlightcolor="black")
    self.Spinbox6.configure(increment="0.01")
    self.Spinbox6.configure(insertbackground="black")
    self.Spinbox6.configure(selectbackground="blue")
    self.Spinbox6.configure(selectforeground="white")
    self.Spinbox6.configure(textvariable=self.spin_nplcs)
    self.spin_nplcs.set('''spin_nplcs''')

    self.Checkbutton6 = tk.Checkbutton(self.top)
    self.Checkbutton6.place(relx=0.44, rely=0.191, relheight=0.027
        , relwidth=0.046)
    self.Checkbutton6.configure(activebackground="#d9d9d9")
    self.Checkbutton6.configure(activeforeground="black")
    self.Checkbutton6.configure(anchor='w')
    self.Checkbutton6.configure(background="#d9d9d9")
    self.Checkbutton6.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton6.configure(compound='left')
    self.Checkbutton6.configure(disabledforeground="#a3a3a3")
    self.Checkbutton6.configure(foreground="#000000")
    self.Checkbutton6.configure(highlightbackground="#d9d9d9")
    self.Checkbutton6.configure(highlightcolor="black")
    self.Checkbutton6.configure(justify='left')
    self.Checkbutton6.configure(text='''Auto''')
    self.Checkbutton6.configure(variable=self.chk_autonplcs)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton6_tooltip = \
    ToolTip(self.Checkbutton6, self.tooltip_font, '''Automatically calculate NPLC according to your timesteps''')

    self.TSeparator2 = ttk.Separator(self.top)
    self.TSeparator2.place(relx=0.3, rely=0.091,  relheight=0.205)
    self.TSeparator2.configure(orient="vertical")

    self.TSeparator3 = ttk.Separator(self.top)
    self.TSeparator3.place(relx=0.493, rely=0.091,  relheight=0.205)
    self.TSeparator3.configure(orient="vertical")

    self.Button9 = tk.Button(self.top)
    self.Button9.place(relx=0.74, rely=0.1, height=24, width=155)
    self.Button9.configure(activebackground="#d9d9d9")
    self.Button9.configure(activeforeground="black")
    self.Button9.configure(background="#d9d9d9")
    self.Button9.configure(command=K2450_Arb_I_support.btn_load_config)
    self.Button9.configure(compound='left')
    self.Button9.configure(disabledforeground="#a3a3a3")
    self.Button9.configure(foreground="#000000")
    self.Button9.configure(highlightbackground="#d9d9d9")
    self.Button9.configure(highlightcolor="black")
    self.Button9.configure(pady="0")
    self.Button9.configure(text='''Load Config''')

    self.Button10 = tk.Button(self.top)
    self.Button10.place(relx=0.74, rely=0.136, height=24, width=155)
    self.Button10.configure(activebackground="#d9d9d9")
    self.Button10.configure(activeforeground="black")
    self.Button10.configure(background="#d9d9d9")
    self.Button10.configure(command=K2450_Arb_I_support.btn_save_config)
    self.Button10.configure(compound='left')
    self.Button10.configure(disabledforeground="#a3a3a3")
    self.Button10.configure(foreground="#000000")
    self.Button10.configure(highlightbackground="#d9d9d9")
    self.Button10.configure(highlightcolor="black")
    self.Button10.configure(pady="0")
    self.Button10.configure(text='''Save Config''')

    self.TSeparator3_1 = ttk.Separator(self.top)
    self.TSeparator3_1.place(relx=0.727, rely=0.091,  relheight=0.205)
    self.TSeparator3_1.configure(orient="vertical")

    self.Label7_1 = tk.Label(self.top)
    self.Label7_1.place(relx=0.507, rely=0.091, height=21, width=123)
    self.Label7_1.configure(activebackground="#f9f9f9")
    self.Label7_1.configure(activeforeground="black")
    self.Label7_1.configure(anchor='w')
    self.Label7_1.configure(background="#d9d9d9")
    self.Label7_1.configure(compound='left')
    self.Label7_1.configure(disabledforeground="#a3a3a3")
    self.Label7_1.configure(foreground="#000000")
    self.Label7_1.configure(highlightbackground="#d9d9d9")
    self.Label7_1.configure(highlightcolor="black")
    self.Label7_1.configure(text='''Misc Configuration''')

    self.Checkbutton7 = tk.Checkbutton(self.top)
    self.Checkbutton7.place(relx=0.507, rely=0.118, relheight=0.026
        , relwidth=0.053)
    self.Checkbutton7.configure(activebackground="#d9d9d9")
    self.Checkbutton7.configure(activeforeground="black")
    self.Checkbutton7.configure(anchor='w')
    self.Checkbutton7.configure(background="#d9d9d9")
    self.Checkbutton7.configure(compound='left')
    self.Checkbutton7.configure(disabledforeground="#a3a3a3")
    self.Checkbutton7.configure(foreground="#000000")
    self.Checkbutton7.configure(highlightbackground="#d9d9d9")
    self.Checkbutton7.configure(highlightcolor="black")
    self.Checkbutton7.configure(justify='left')
    self.Checkbutton7.configure(text='''Beep''')
    self.Checkbutton7.configure(variable=self.chk_beep)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton7_tooltip = \
    ToolTip(self.Checkbutton7, self.tooltip_font, '''Beeps the SMU''')

    self.InfoImage = tk.Label(self.top)
    self.InfoImage.place(relx=0.187, rely=0.882, height=22, width=34)
    self.InfoImage.configure(activebackground="#f9f9f9")
    self.InfoImage.configure(activeforeground="black")
    self.InfoImage.configure(anchor='w')
    self.InfoImage.configure(background="#d9d9d9")
    self.InfoImage.configure(compound='left')
    self.InfoImage.configure(disabledforeground="#a3a3a3")
    self.InfoImage.configure(foreground="#000000")
    self.InfoImage.configure(highlightbackground="#d9d9d9")
    self.InfoImage.configure(highlightcolor="black")

    self.Label12 = tk.Label(self.top)
    self.Label12.place(relx=0.007, rely=0.823, height=147, width=430)
    self.Label12.configure(activebackground="#f9f9f9")
    self.Label12.configure(activeforeground="black")
    self.Label12.configure(anchor='w')
    self.Label12.configure(background="#d9d9d9")
    self.Label12.configure(compound='left')
    self.Label12.configure(disabledforeground="#a3a3a3")
    self.Label12.configure(foreground="black")
    self.Label12.configure(highlightbackground="#d9d9d9")
    self.Label12.configure(highlightcolor="black")
    self.Label12.configure(justify='left')

    self.Infobox = tk.Text(self.top)
    self.Infobox.place(relx=0.507, rely=0.182, relheight=0.106, relwidth=0.208)
    self.Infobox.configure(background="white")
    self.Infobox.configure(font="TkTextFont")
    self.Infobox.configure(foreground="black")
    self.Infobox.configure(highlightbackground="#d9d9d9")
    self.Infobox.configure(highlightcolor="black")
    self.Infobox.configure(insertbackground="black")
    self.Infobox.configure(selectbackground="blue")
    self.Infobox.configure(selectforeground="white")
    self.Infobox.configure(state='disabled')
    self.Infobox.configure(wrap="word")

    self.TCombobox3 = ttk.Combobox(self.top)
    self.TCombobox3.place(relx=0.08, rely=0.155, relheight=0.026, relwidth=0.062)

    self.value_list = ['10e-9','100e-9','1e-6','10e-6','100e-6','1e-3','10e-3','100e-3','1',]
    self.TCombobox3.configure(values=self.value_list)
    self.TCombobox3.configure(textvariable=self.var_i_range_box)
    self.var_i_range_box.set('''var_i_range_box''')
    self.TCombobox3.configure(takefocus="")

    self.Label4 = tk.Label(self.top)
    self.Label4.place(relx=0.02, rely=0.155, height=24, width=64)
    self.Label4.configure(activebackground="#f9f9f9")
    self.Label4.configure(activeforeground="black")
    self.Label4.configure(anchor='w')
    self.Label4.configure(background="#d9d9d9")
    self.Label4.configure(compound='left')
    self.Label4.configure(disabledforeground="#a3a3a3")
    self.Label4.configure(foreground="#000000")
    self.Label4.configure(highlightbackground="#d9d9d9")
    self.Label4.configure(highlightcolor="black")
    self.Label4.configure(text='''Range (A):''')

    self.TCombobox4 = ttk.Combobox(self.top)
    self.TCombobox4.place(relx=0.367, rely=0.155, relheight=0.027
        , relwidth=0.065)
    self.value_list = ['0.02','0.2','2','20','200',]
    self.TCombobox4.configure(values=self.value_list)
    self.TCombobox4.configure(textvariable=self.var_range_v_box)
    self.var_range_v_box.set('''var_range_v_box''')
    self.TCombobox4.configure(takefocus="")
    self.tooltip_font = "TkDefaultFont"
    self.TCombobox4_tooltip = \
    ToolTip(self.TCombobox4, self.tooltip_font, '''Measurement Range. Choose according to your source.''')

    self.Checkbutton8 = tk.Checkbutton(self.top)
    self.Checkbutton8.place(relx=0.153, rely=0.264, relheight=0.028
        , relwidth=0.073)
    self.Checkbutton8.configure(activebackground="#d9d9d9")
    self.Checkbutton8.configure(activeforeground="#000000")
    self.Checkbutton8.configure(anchor='w')
    self.Checkbutton8.configure(background="#d9d9d9")
    self.Checkbutton8.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton8.configure(compound='left')
    self.Checkbutton8.configure(disabledforeground="#a3a3a3")
    self.Checkbutton8.configure(foreground="#000000")
    self.Checkbutton8.configure(highlightbackground="#d9d9d9")
    self.Checkbutton8.configure(highlightcolor="black")
    self.Checkbutton8.configure(justify='left')
    self.Checkbutton8.configure(text='''Protect (V):''')
    self.Checkbutton8.configure(variable=self.chk_protect_enable)

    self.Checkbutton6_1 = tk.Checkbutton(self.top)
    self.Checkbutton6_1.place(relx=0.44, rely=0.155, relheight=0.027
        , relwidth=0.048)
    self.Checkbutton6_1.configure(activebackground="#d9d9d9")
    self.Checkbutton6_1.configure(activeforeground="black")
    self.Checkbutton6_1.configure(anchor='w')
    self.Checkbutton6_1.configure(background="#d9d9d9")
    self.Checkbutton6_1.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton6_1.configure(compound='left')
    self.Checkbutton6_1.configure(disabledforeground="#a3a3a3")
    self.Checkbutton6_1.configure(foreground="#000000")
    self.Checkbutton6_1.configure(highlightbackground="#d9d9d9")
    self.Checkbutton6_1.configure(highlightcolor="black")
    self.Checkbutton6_1.configure(justify='left')
    self.Checkbutton6_1.configure(text='''Auto''')
    self.Checkbutton6_1.configure(variable=self.chk_autovrange)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton6_1_tooltip = \
    ToolTip(self.Checkbutton6_1, self.tooltip_font, '''Enable autoranging for measurements on the SMU. Warning: Slow!''')

    self.Checkbutton6_2 = tk.Checkbutton(self.top)
    self.Checkbutton6_2.place(relx=0.147, rely=0.155, relheight=0.025
        , relwidth=0.048)
    self.Checkbutton6_2.configure(activebackground="#d9d9d9")
    self.Checkbutton6_2.configure(activeforeground="black")
    self.Checkbutton6_2.configure(anchor='w')
    self.Checkbutton6_2.configure(background="#d9d9d9")
    self.Checkbutton6_2.configure(command=K2450_Arb_I_support.UiActivityUpdate)
    self.Checkbutton6_2.configure(compound='left')
    self.Checkbutton6_2.configure(disabledforeground="#a3a3a3")
    self.Checkbutton6_2.configure(foreground="#000000")
    self.Checkbutton6_2.configure(highlightbackground="#d9d9d9")
    self.Checkbutton6_2.configure(highlightcolor="black")
    self.Checkbutton6_2.configure(justify='left')
    self.Checkbutton6_2.configure(text='''Auto''')
    self.Checkbutton6_2.configure(variable=self.chk_autoirange)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton6_2_tooltip = \
    ToolTip(self.Checkbutton6_2, self.tooltip_font, '''Automatically calculate the source range from pwl data''')

    self.Checkbutton9 = tk.Checkbutton(self.top)
    self.Checkbutton9.place(relx=0.587, rely=0.118, relheight=0.027
        , relwidth=0.099)
    self.Checkbutton9.configure(activebackground="#d9d9d9")
    self.Checkbutton9.configure(activeforeground="#000000")
    self.Checkbutton9.configure(anchor='w')
    self.Checkbutton9.configure(background="#d9d9d9")
    self.Checkbutton9.configure(compound='left')
    self.Checkbutton9.configure(disabledforeground="#a3a3a3")
    self.Checkbutton9.configure(foreground="#000000")
    self.Checkbutton9.configure(highlightbackground="#d9d9d9")
    self.Checkbutton9.configure(highlightcolor="black")
    self.Checkbutton9.configure(justify='left')
    self.Checkbutton9.configure(text='''Assure timing''')
    self.Checkbutton9.configure(variable=self.chk_assure_timing)
    self.tooltip_font = "TkDefaultFont"
    self.Checkbutton9_tooltip = \
    ToolTip(self.Checkbutton9, self.tooltip_font, '''Check if timing will work out before running the sequence''')

    self.Btn_Simulate = tk.Button(self.top)
    self.Btn_Simulate.place(relx=0.88, rely=0.245, height=40, width=135)
    self.Btn_Simulate.configure(activebackground="#d9d9d9")
    self.Btn_Simulate.configure(activeforeground="#000000")
    self.Btn_Simulate.configure(background="#d9d9d9")
    self.Btn_Simulate.configure(command=K2450_Arb_I_support.Run_Simulate)
    self.Btn_Simulate.configure(compound='left')
    self.Btn_Simulate.configure(disabledforeground="#a3a3a3")
    self.Btn_Simulate.configure(foreground="#000000")
    self.Btn_Simulate.configure(highlightbackground="#d9d9d9")
    self.Btn_Simulate.configure(highlightcolor="black")
    self.Btn_Simulate.configure(pady="0")
    self.Btn_Simulate.configure(text='''Simulate''')

    self.Spinbox5_1 = tk.Spinbox(self.top, from_=0.2, to=100.0)
    self.Spinbox5_1.place(relx=0.4, rely=0.255, relheight=0.025, relwidth=0.055)
    self.Spinbox5_1.configure(activebackground="#f9f9f9")
    self.Spinbox5_1.configure(background="white")
    self.Spinbox5_1.configure(buttonbackground="#d9d9d9")
    self.Spinbox5_1.configure(disabledforeground="#a3a3a3")
    self.Spinbox5_1.configure(font="TkDefaultFont")
    self.Spinbox5_1.configure(foreground="black")
    self.Spinbox5_1.configure(highlightbackground="black")
    self.Spinbox5_1.configure(highlightcolor="black")
    self.Spinbox5_1.configure(increment="0.1")
    self.Spinbox5_1.configure(insertbackground="black")
    self.Spinbox5_1.configure(selectbackground="blue")
    self.Spinbox5_1.configure(selectforeground="white")
    self.Spinbox5_1.configure(textvariable=self.spin_inital_delay)
    self.spin_inital_delay.set('''spin_inital_delay''')

    self.Label11_1 = tk.Label(self.top)
    self.Label11_1.place(relx=0.32, rely=0.255, height=24, width=84)
    self.Label11_1.configure(activebackground="#f9f9f9")
    self.Label11_1.configure(activeforeground="black")
    self.Label11_1.configure(anchor='w')
    self.Label11_1.configure(background="#d9d9d9")
    self.Label11_1.configure(compound='left')
    self.Label11_1.configure(disabledforeground="#a3a3a3")
    self.Label11_1.configure(foreground="#000000")
    self.Label11_1.configure(highlightbackground="#d9d9d9")
    self.Label11_1.configure(highlightcolor="black")
    self.Label11_1.configure(text='''Initial delay (s):''')
    self.tooltip_font = "TkDefaultFont"
    self.Label11_1_tooltip = \
    ToolTip(self.Label11_1, self.tooltip_font, '''Wait time with active 0A before starting the measurements''')

    self.Checkbutton10 = tk.Checkbutton(self.top)
    self.Checkbutton10.place(relx=0.507, rely=0.145, relheight=0.026
        , relwidth=0.16)
    self.Checkbutton10.configure(activebackground="#d9d9d9")
    self.Checkbutton10.configure(activeforeground="#000000")
    self.Checkbutton10.configure(anchor='w')
    self.Checkbutton10.configure(background="#d9d9d9")
    self.Checkbutton10.configure(compound='left')
    self.Checkbutton10.configure(disabledforeground="#a3a3a3")
    self.Checkbutton10.configure(foreground="#000000")
    self.Checkbutton10.configure(highlightbackground="#d9d9d9")
    self.Checkbutton10.configure(highlightcolor="black")
    self.Checkbutton10.configure(justify='left')
    self.Checkbutton10.configure(text='''Steppy plot (Sourced currents)''')
    self.Checkbutton10.configure(variable=self.chk_steppy_currents)

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
  '''Configure the scrollbars for a widget.'''
  def __init__(self, master):
    #  Rozen. Added the try-except clauses so that this class
    #  could be used for scrolled entry widget for which vertical
    #  scrolling is not supported. 5/7/14.
    try:
      vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
    except:
      pass
    hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
    try:
      self.configure(yscrollcommand=self._autoscroll(vsb))
    except:
      pass
    self.configure(xscrollcommand=self._autoscroll(hsb))
    self.grid(column=0, row=0, sticky='nsew')
    try:
      vsb.grid(column=1, row=0, sticky='ns')
    except:
      pass
    hsb.grid(column=0, row=1, sticky='ew')
    master.grid_columnconfigure(0, weight=1)
    master.grid_rowconfigure(0, weight=1)
    # Copy geometry methods of master  (taken from ScrolledText.py)
    methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
          | tk.Place.__dict__.keys()
    for meth in methods:
      if meth[0] != '_' and meth not in ('config', 'configure'):
        setattr(self, meth, getattr(master, meth))

  @staticmethod
  def _autoscroll(sbar):
    '''Hide and show scrollbar as needed.'''
    def wrapped(first, last):
      first, last = float(first), float(last)
      if first <= 0 and last >= 1:
        sbar.grid_remove()
      else:
        sbar.grid()
      sbar.set(first, last)
    return wrapped

  def __str__(self):
    return str(self.master)

def _create_container(func):
  '''Creates a ttk Frame with a given master, and use this new frame to
  place the scrollbars and the widget.'''
  def wrapped(cls, master, **kw):
    container = ttk.Frame(master)
    container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
    container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
    return func(cls, container, **kw)
  return wrapped

class ScrolledText(AutoScroll, tk.Text):
  '''A standard Tkinter Text widget with scrollbars that will
  automatically show/hide as needed.'''
  @_create_container
  def __init__(self, master, **kw):
    tk.Text.__init__(self, master, **kw)
    AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
  child = widget.winfo_children()[0]
  if platform.system() == 'Windows' or platform.system() == 'Darwin':
    child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
    child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
  else:
    child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
    child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
    child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
    child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
  if platform.system() == 'Windows' or platform.system() == 'Darwin':
    widget.unbind_all('<MouseWheel>')
    widget.unbind_all('<Shift-MouseWheel>')
  else:
    widget.unbind_all('<Button-4>')
    widget.unbind_all('<Button-5>')
    widget.unbind_all('<Shift-Button-4>')
    widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
  if platform.system() == 'Windows':
    widget.yview_scroll(-1*int(event.delta/120),'units')
  elif platform.system() == 'Darwin':
    widget.yview_scroll(-1*int(event.delta),'units')
  else:
    if event.num == 4:
      widget.yview_scroll(-1, 'units')
    elif event.num == 5:
      widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
  if platform.system() == 'Windows':
    widget.xview_scroll(-1*int(event.delta/120), 'units')
  elif platform.system() == 'Darwin':
    widget.xview_scroll(-1*int(event.delta), 'units')
  else:
    if event.num == 4:
      widget.xview_scroll(-1, 'units')
    elif event.num == 5:
      widget.xview_scroll(1, 'units')
def start_up():
  K2450_Arb_I_support.main()

if __name__ == '__main__':
  K2450_Arb_I_support.main()




